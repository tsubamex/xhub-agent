// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: proto/report.proto

package reportpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReportRequest contains the data to be reported
type ReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // Agent unique identifier
	Data          *ServerStatusData      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Server status data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	mi := &file_proto_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{0}
}

func (x *ReportRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReportRequest) GetData() *ServerStatusData {
	if x != nil {
		return x.Data
	}
	return nil
}

// ReportResponse contains the response from the server
type ReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the request was successful
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Response message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	mi := &file_proto_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{1}
}

func (x *ReportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ServerStatusData contains comprehensive server status information
type ServerStatusData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           float64                `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`                                      // CPU usage rate
	CpuCores      int32                  `protobuf:"varint,2,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`             // CPU core count
	LogicalPro    int32                  `protobuf:"varint,3,opt,name=logical_pro,json=logicalPro,proto3" json:"logical_pro,omitempty"`       // Logical processor count
	CpuSpeedMhz   float64                `protobuf:"fixed64,4,opt,name=cpu_speed_mhz,json=cpuSpeedMhz,proto3" json:"cpu_speed_mhz,omitempty"` // CPU frequency (MHz)
	Memory        *MemoryInfo            `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`                                  // Memory information
	Swap          *SwapInfo              `protobuf:"bytes,6,opt,name=swap,proto3" json:"swap,omitempty"`                                      // Swap space information
	Disk          *DiskInfo              `protobuf:"bytes,7,opt,name=disk,proto3" json:"disk,omitempty"`                                      // Disk information
	Uptime        int32                  `protobuf:"varint,8,opt,name=uptime,proto3" json:"uptime,omitempty"`                                 // Uptime (seconds)
	Loads         []float64              `protobuf:"fixed64,9,rep,packed,name=loads,proto3" json:"loads,omitempty"`                           // System load
	TcpCount      int32                  `protobuf:"varint,10,opt,name=tcp_count,json=tcpCount,proto3" json:"tcp_count,omitempty"`            // TCP connection count
	UdpCount      int32                  `protobuf:"varint,11,opt,name=udp_count,json=udpCount,proto3" json:"udp_count,omitempty"`            // UDP connection count
	NetIo         *NetIOInfo             `protobuf:"bytes,12,opt,name=net_io,json=netIo,proto3" json:"net_io,omitempty"`                      // Network IO
	NetTraffic    *NetTraffic            `protobuf:"bytes,13,opt,name=net_traffic,json=netTraffic,proto3" json:"net_traffic,omitempty"`       // Network traffic
	PublicIp      *PublicIPInfo          `protobuf:"bytes,14,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`             // Public IP information
	Xray          *XrayInfo              `protobuf:"bytes,15,opt,name=xray,proto3" json:"xray,omitempty"`                                     // Xray status
	AppStats      *AppStats              `protobuf:"bytes,16,opt,name=app_stats,json=appStats,proto3" json:"app_stats,omitempty"`             // Application status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusData) Reset() {
	*x = ServerStatusData{}
	mi := &file_proto_report_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusData) ProtoMessage() {}

func (x *ServerStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusData.ProtoReflect.Descriptor instead.
func (*ServerStatusData) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{2}
}

func (x *ServerStatusData) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ServerStatusData) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *ServerStatusData) GetLogicalPro() int32 {
	if x != nil {
		return x.LogicalPro
	}
	return 0
}

func (x *ServerStatusData) GetCpuSpeedMhz() float64 {
	if x != nil {
		return x.CpuSpeedMhz
	}
	return 0
}

func (x *ServerStatusData) GetMemory() *MemoryInfo {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *ServerStatusData) GetSwap() *SwapInfo {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *ServerStatusData) GetDisk() *DiskInfo {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *ServerStatusData) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *ServerStatusData) GetLoads() []float64 {
	if x != nil {
		return x.Loads
	}
	return nil
}

func (x *ServerStatusData) GetTcpCount() int32 {
	if x != nil {
		return x.TcpCount
	}
	return 0
}

func (x *ServerStatusData) GetUdpCount() int32 {
	if x != nil {
		return x.UdpCount
	}
	return 0
}

func (x *ServerStatusData) GetNetIo() *NetIOInfo {
	if x != nil {
		return x.NetIo
	}
	return nil
}

func (x *ServerStatusData) GetNetTraffic() *NetTraffic {
	if x != nil {
		return x.NetTraffic
	}
	return nil
}

func (x *ServerStatusData) GetPublicIp() *PublicIPInfo {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *ServerStatusData) GetXray() *XrayInfo {
	if x != nil {
		return x.Xray
	}
	return nil
}

func (x *ServerStatusData) GetAppStats() *AppStats {
	if x != nil {
		return x.AppStats
	}
	return nil
}

// MemoryInfo contains memory usage information
type MemoryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` // Current memory usage
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // Total memory
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	mi := &file_proto_report_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{3}
}

func (x *MemoryInfo) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *MemoryInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// SwapInfo contains swap space information
type SwapInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` // Current swap usage
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // Total swap space
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapInfo) Reset() {
	*x = SwapInfo{}
	mi := &file_proto_report_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInfo) ProtoMessage() {}

func (x *SwapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInfo.ProtoReflect.Descriptor instead.
func (*SwapInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{4}
}

func (x *SwapInfo) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *SwapInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// DiskInfo contains disk usage information
type DiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` // Current disk usage
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`     // Total disk space
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	mi := &file_proto_report_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{5}
}

func (x *DiskInfo) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DiskInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// NetIOInfo contains network IO information
type NetIOInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Up            int64                  `protobuf:"varint,1,opt,name=up,proto3" json:"up,omitempty"`     // Upload traffic
	Down          int64                  `protobuf:"varint,2,opt,name=down,proto3" json:"down,omitempty"` // Download traffic
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetIOInfo) Reset() {
	*x = NetIOInfo{}
	mi := &file_proto_report_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetIOInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetIOInfo) ProtoMessage() {}

func (x *NetIOInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetIOInfo.ProtoReflect.Descriptor instead.
func (*NetIOInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{6}
}

func (x *NetIOInfo) GetUp() int64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *NetIOInfo) GetDown() int64 {
	if x != nil {
		return x.Down
	}
	return 0
}

// NetTraffic contains network traffic information
type NetTraffic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sent          int64                  `protobuf:"varint,1,opt,name=sent,proto3" json:"sent,omitempty"` // Sent traffic
	Recv          int64                  `protobuf:"varint,2,opt,name=recv,proto3" json:"recv,omitempty"` // Received traffic
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetTraffic) Reset() {
	*x = NetTraffic{}
	mi := &file_proto_report_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetTraffic) ProtoMessage() {}

func (x *NetTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetTraffic.ProtoReflect.Descriptor instead.
func (*NetTraffic) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{7}
}

func (x *NetTraffic) GetSent() int64 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *NetTraffic) GetRecv() int64 {
	if x != nil {
		return x.Recv
	}
	return 0
}

// XrayInfo contains Xray status information
type XrayInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`                       // Running status ("running" or other)
	ErrorMsg      string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"` // Error message
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                   // Version
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XrayInfo) Reset() {
	*x = XrayInfo{}
	mi := &file_proto_report_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XrayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrayInfo) ProtoMessage() {}

func (x *XrayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrayInfo.ProtoReflect.Descriptor instead.
func (*XrayInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{8}
}

func (x *XrayInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *XrayInfo) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *XrayInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// PublicIPInfo contains public IP information
type PublicIPInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4          string                 `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"` // IPv4 address
	Ipv6          string                 `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"` // IPv6 address
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicIPInfo) Reset() {
	*x = PublicIPInfo{}
	mi := &file_proto_report_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicIPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicIPInfo) ProtoMessage() {}

func (x *PublicIPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicIPInfo.ProtoReflect.Descriptor instead.
func (*PublicIPInfo) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{9}
}

func (x *PublicIPInfo) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *PublicIPInfo) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

// AppStats contains application status information
type AppStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threads       int32                  `protobuf:"varint,1,opt,name=threads,proto3" json:"threads,omitempty"` // Thread count
	Memory        int64                  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`   // Application memory usage
	Uptime        int32                  `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`   // Application uptime
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppStats) Reset() {
	*x = AppStats{}
	mi := &file_proto_report_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStats) ProtoMessage() {}

func (x *AppStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStats.ProtoReflect.Descriptor instead.
func (*AppStats) Descriptor() ([]byte, []int) {
	return file_proto_report_proto_rawDescGZIP(), []int{10}
}

func (x *AppStats) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *AppStats) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *AppStats) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

var File_proto_report_proto protoreflect.FileDescriptor

const file_proto_report_proto_rawDesc = "" +
	"\n" +
	"\x12proto/report.proto\x12\breportpb\"S\n" +
	"\rReportRequest\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12.\n" +
	"\x04data\x18\x02 \x01(\v2\x1a.reportpb.ServerStatusDataR\x04data\"D\n" +
	"\x0eReportResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xdd\x04\n" +
	"\x10ServerStatusData\x12\x10\n" +
	"\x03cpu\x18\x01 \x01(\x01R\x03cpu\x12\x1b\n" +
	"\tcpu_cores\x18\x02 \x01(\x05R\bcpuCores\x12\x1f\n" +
	"\vlogical_pro\x18\x03 \x01(\x05R\n" +
	"logicalPro\x12\"\n" +
	"\rcpu_speed_mhz\x18\x04 \x01(\x01R\vcpuSpeedMhz\x12,\n" +
	"\x06memory\x18\x05 \x01(\v2\x14.reportpb.MemoryInfoR\x06memory\x12&\n" +
	"\x04swap\x18\x06 \x01(\v2\x12.reportpb.SwapInfoR\x04swap\x12&\n" +
	"\x04disk\x18\a \x01(\v2\x12.reportpb.DiskInfoR\x04disk\x12\x16\n" +
	"\x06uptime\x18\b \x01(\x05R\x06uptime\x12\x14\n" +
	"\x05loads\x18\t \x03(\x01R\x05loads\x12\x1b\n" +
	"\ttcp_count\x18\n" +
	" \x01(\x05R\btcpCount\x12\x1b\n" +
	"\tudp_count\x18\v \x01(\x05R\budpCount\x12*\n" +
	"\x06net_io\x18\f \x01(\v2\x13.reportpb.NetIOInfoR\x05netIo\x125\n" +
	"\vnet_traffic\x18\r \x01(\v2\x14.reportpb.NetTrafficR\n" +
	"netTraffic\x123\n" +
	"\tpublic_ip\x18\x0e \x01(\v2\x16.reportpb.PublicIPInfoR\bpublicIp\x12&\n" +
	"\x04xray\x18\x0f \x01(\v2\x12.reportpb.XrayInfoR\x04xray\x12/\n" +
	"\tapp_stats\x18\x10 \x01(\v2\x12.reportpb.AppStatsR\bappStats\"<\n" +
	"\n" +
	"MemoryInfo\x12\x18\n" +
	"\acurrent\x18\x01 \x01(\x03R\acurrent\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\":\n" +
	"\bSwapInfo\x12\x18\n" +
	"\acurrent\x18\x01 \x01(\x03R\acurrent\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\":\n" +
	"\bDiskInfo\x12\x18\n" +
	"\acurrent\x18\x01 \x01(\x03R\acurrent\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\"/\n" +
	"\tNetIOInfo\x12\x0e\n" +
	"\x02up\x18\x01 \x01(\x03R\x02up\x12\x12\n" +
	"\x04down\x18\x02 \x01(\x03R\x04down\"4\n" +
	"\n" +
	"NetTraffic\x12\x12\n" +
	"\x04sent\x18\x01 \x01(\x03R\x04sent\x12\x12\n" +
	"\x04recv\x18\x02 \x01(\x03R\x04recv\"W\n" +
	"\bXrayInfo\x12\x14\n" +
	"\x05state\x18\x01 \x01(\tR\x05state\x12\x1b\n" +
	"\terror_msg\x18\x02 \x01(\tR\berrorMsg\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\"6\n" +
	"\fPublicIPInfo\x12\x12\n" +
	"\x04ipv4\x18\x01 \x01(\tR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\x02 \x01(\tR\x04ipv6\"T\n" +
	"\bAppStats\x12\x18\n" +
	"\athreads\x18\x01 \x01(\x05R\athreads\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\x03R\x06memory\x12\x16\n" +
	"\x06uptime\x18\x03 \x01(\x05R\x06uptime2P\n" +
	"\rReportService\x12?\n" +
	"\n" +
	"SendReport\x12\x17.reportpb.ReportRequest\x1a\x18.reportpb.ReportResponseB\x1bZ\x19xhub-agent/proto/reportpbb\x06proto3"

var (
	file_proto_report_proto_rawDescOnce sync.Once
	file_proto_report_proto_rawDescData []byte
)

func file_proto_report_proto_rawDescGZIP() []byte {
	file_proto_report_proto_rawDescOnce.Do(func() {
		file_proto_report_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_report_proto_rawDesc), len(file_proto_report_proto_rawDesc)))
	})
	return file_proto_report_proto_rawDescData
}

var file_proto_report_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_report_proto_goTypes = []any{
	(*ReportRequest)(nil),    // 0: reportpb.ReportRequest
	(*ReportResponse)(nil),   // 1: reportpb.ReportResponse
	(*ServerStatusData)(nil), // 2: reportpb.ServerStatusData
	(*MemoryInfo)(nil),       // 3: reportpb.MemoryInfo
	(*SwapInfo)(nil),         // 4: reportpb.SwapInfo
	(*DiskInfo)(nil),         // 5: reportpb.DiskInfo
	(*NetIOInfo)(nil),        // 6: reportpb.NetIOInfo
	(*NetTraffic)(nil),       // 7: reportpb.NetTraffic
	(*XrayInfo)(nil),         // 8: reportpb.XrayInfo
	(*PublicIPInfo)(nil),     // 9: reportpb.PublicIPInfo
	(*AppStats)(nil),         // 10: reportpb.AppStats
}
var file_proto_report_proto_depIdxs = []int32{
	2,  // 0: reportpb.ReportRequest.data:type_name -> reportpb.ServerStatusData
	3,  // 1: reportpb.ServerStatusData.memory:type_name -> reportpb.MemoryInfo
	4,  // 2: reportpb.ServerStatusData.swap:type_name -> reportpb.SwapInfo
	5,  // 3: reportpb.ServerStatusData.disk:type_name -> reportpb.DiskInfo
	6,  // 4: reportpb.ServerStatusData.net_io:type_name -> reportpb.NetIOInfo
	7,  // 5: reportpb.ServerStatusData.net_traffic:type_name -> reportpb.NetTraffic
	9,  // 6: reportpb.ServerStatusData.public_ip:type_name -> reportpb.PublicIPInfo
	8,  // 7: reportpb.ServerStatusData.xray:type_name -> reportpb.XrayInfo
	10, // 8: reportpb.ServerStatusData.app_stats:type_name -> reportpb.AppStats
	0,  // 9: reportpb.ReportService.SendReport:input_type -> reportpb.ReportRequest
	1,  // 10: reportpb.ReportService.SendReport:output_type -> reportpb.ReportResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_report_proto_init() }
func file_proto_report_proto_init() {
	if File_proto_report_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_report_proto_rawDesc), len(file_proto_report_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_report_proto_goTypes,
		DependencyIndexes: file_proto_report_proto_depIdxs,
		MessageInfos:      file_proto_report_proto_msgTypes,
	}.Build()
	File_proto_report_proto = out.File
	file_proto_report_proto_goTypes = nil
	file_proto_report_proto_depIdxs = nil
}
